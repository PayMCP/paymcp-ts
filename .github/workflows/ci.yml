name: CI

on:
  push:
    branches: [main, master, develop, 'feat/**']
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, master, develop]

jobs:
  test:
    name: Test Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [24.x]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests with coverage
      run: npm run test:coverage

    - name: Check coverage thresholds
      run: |
        echo "Verifying 90% coverage requirement..."
        # Coverage check is built into vitest config and will fail if thresholds not met

    - name: Upload coverage report
      if: matrix.node-version == '24.x'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          ./coverage/lcov.info
          ./coverage/coverage-final.json
        retention-days: 30

    - name: Build
      run: npm run build

    - name: Check types
      run: npx tsc --noEmit

  quality:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 24.x
      uses: actions/setup-node@v4
      with:
        node-version: '24.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run coverage analysis
      run: npm run test:coverage

    - name: Verify minimum coverage (90%)
      run: |
        echo "✅ Coverage thresholds enforced by vitest config:"
        echo "   - Branches: 90%"
        echo "   - Functions: 90%"
        echo "   - Lines: 90%"
        echo "   - Statements: 90%"
        echo "Build will fail if coverage is below these thresholds."

    - name: Coverage summary
      run: |
        echo "📊 Coverage analysis complete"
        echo "All quality gates passed ✅"

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check formatting
      run: npx prettier --check "src/**/*.ts" "tests/**/*.ts"

    - name: Lint code
      run: npx eslint "src/**/*.ts" "tests/**/*.ts" || true

  # Coverage reporting for PRs
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref != 'refs/heads/main')
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 24.x
      uses: actions/setup-node@v4
      with:
        node-version: '24.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate coverage report
      run: npm run test:coverage

    - name: Find PR number (for push events)
      id: findpr
      if: github.event_name == 'push'
      run: |
        PR_NUMBER=$(gh pr list --head ${{ github.head_ref || github.ref_name }} --json number --jq '.[0].number' || echo "")
        echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Parse coverage data for PR comment
      id: coverage
      run: |
        # Parse LCOV file to extract coverage data
        if [ -f "./coverage/lcov.info" ]; then
          LINES_FOUND=$(grep -c "^LF:" coverage/lcov.info || echo 0)
          LINES_HIT=$(grep "^LH:" coverage/lcov.info | awk -F: '{sum+=$2} END {print sum+0}')
          LINES_TOTAL=$(grep "^LF:" coverage/lcov.info | awk -F: '{sum+=$2} END {print sum+0}')

          BRANCHES_FOUND=$(grep -c "^BRF:" coverage/lcov.info || echo 0)
          BRANCHES_HIT=$(grep "^BRH:" coverage/lcov.info | awk -F: '{sum+=$2} END {print sum+0}')
          BRANCHES_TOTAL=$(grep "^BRF:" coverage/lcov.info | awk -F: '{sum+=$2} END {print sum+0}')

          FUNCTIONS_FOUND=$(grep -c "^FNF:" coverage/lcov.info || echo 0)
          FUNCTIONS_HIT=$(grep "^FNH:" coverage/lcov.info | awk -F: '{sum+=$2} END {print sum+0}')
          FUNCTIONS_TOTAL=$(grep "^FNF:" coverage/lcov.info | awk -F: '{sum+=$2} END {print sum+0}')

          # Calculate percentages
          LINE_PERCENT=$(echo "scale=1; $LINES_HIT * 100 / $LINES_TOTAL" | bc -l 2>/dev/null || echo "0")
          BRANCH_PERCENT=$(echo "scale=1; $BRANCHES_HIT * 100 / $BRANCHES_TOTAL" | bc -l 2>/dev/null || echo "0")
          FUNCTION_PERCENT=$(echo "scale=1; $FUNCTIONS_HIT * 100 / $FUNCTIONS_TOTAL" | bc -l 2>/dev/null || echo "0")

          echo "lines_percent=$LINE_PERCENT" >> $GITHUB_OUTPUT
          echo "branches_percent=$BRANCH_PERCENT" >> $GITHUB_OUTPUT
          echo "functions_percent=$FUNCTION_PERCENT" >> $GITHUB_OUTPUT
          echo "lines_hit=$LINES_HIT" >> $GITHUB_OUTPUT
          echo "lines_total=$LINES_TOTAL" >> $GITHUB_OUTPUT
          echo "branches_hit=$BRANCHES_HIT" >> $GITHUB_OUTPUT
          echo "branches_total=$BRANCHES_TOTAL" >> $GITHUB_OUTPUT
          echo "functions_hit=$FUNCTIONS_HIT" >> $GITHUB_OUTPUT
          echo "functions_total=$FUNCTIONS_TOTAL" >> $GITHUB_OUTPUT
        fi

    - name: Coverage Report as Comment (PR event)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const linePercent = '${{ steps.coverage.outputs.lines_percent }}';
          const branchPercent = '${{ steps.coverage.outputs.branches_percent }}';
          const functionPercent = '${{ steps.coverage.outputs.functions_percent }}';
          const linesHit = '${{ steps.coverage.outputs.lines_hit }}';
          const linesTotal = '${{ steps.coverage.outputs.lines_total }}';
          const branchesHit = '${{ steps.coverage.outputs.branches_hit }}';
          const branchesTotal = '${{ steps.coverage.outputs.branches_total }}';
          const functionsHit = '${{ steps.coverage.outputs.functions_hit }}';
          const functionsTotal = '${{ steps.coverage.outputs.functions_total }}';

          const coverageComment = `## ✅ Coverage Report

          ### Summary
          | Type | Percentage | Covered | Total |
          |------|------------|---------|-------|
          | Lines | ${linePercent}% | ${linesHit} | ${linesTotal} |
          | Branches | ${branchPercent}% | ${branchesHit} | ${branchesTotal} |
          | Functions | ${functionPercent}% | ${functionsHit} | ${functionsTotal} |

          ### Status
          ${parseFloat(linePercent) >= 90 ? '✅ PASSED' : '❌ FAILED'} (≥90% required for lines)

          ---
          *Coverage report generated for commit \`${{ github.sha }}\` at ${new Date().toISOString()}*`;

          // Delete old coverage comments
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const oldCoverageComments = comments.data.filter(
            comment => comment.body.includes('## ✅ Coverage Report')
          );

          for (const comment of oldCoverageComments) {
            await github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: comment.id,
            });
          }

          // Post new coverage comment
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: coverageComment
          });

    - name: Coverage Report as Comment (Push event)
      if: github.event_name == 'push' && steps.findpr.outputs.number
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = '${{ steps.findpr.outputs.number }}';
          if (!prNumber) return;

          const linePercent = '${{ steps.coverage.outputs.lines_percent }}';
          const branchPercent = '${{ steps.coverage.outputs.branches_percent }}';
          const functionPercent = '${{ steps.coverage.outputs.functions_percent }}';
          const linesHit = '${{ steps.coverage.outputs.lines_hit }}';
          const linesTotal = '${{ steps.coverage.outputs.lines_total }}';
          const branchesHit = '${{ steps.coverage.outputs.branches_hit }}';
          const branchesTotal = '${{ steps.coverage.outputs.branches_total }}';
          const functionsHit = '${{ steps.coverage.outputs.functions_hit }}';
          const functionsTotal = '${{ steps.coverage.outputs.functions_total }}';

          const coverageComment = `## ✅ Coverage Report

          ### Summary
          | Type | Percentage | Covered | Total |
          |------|------------|---------|-------|
          | Lines | ${linePercent}% | ${linesHit} | ${linesTotal} |
          | Branches | ${branchPercent}% | ${branchesHit} | ${branchesTotal} |
          | Functions | ${functionPercent}% | ${functionsHit} | ${functionsTotal} |

          ### Status
          ${parseFloat(linePercent) >= 90 ? '✅ PASSED' : '❌ FAILED'} (≥90% required for lines)

          ---
          *Coverage report generated for commit \`${{ github.sha }}\` at ${new Date().toISOString()}*`;

          // Delete old coverage comments
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: parseInt(prNumber),
          });

          const oldCoverageComments = comments.data.filter(
            comment => comment.body.includes('## ✅ Coverage Report')
          );

          for (const comment of oldCoverageComments) {
            await github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: comment.id,
            });
          }

          // Post new coverage comment
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: parseInt(prNumber),
            body: coverageComment
          });

  # Final job that requires all quality checks to pass
  all-checks:
    name: All Quality Checks
    runs-on: ubuntu-latest
    needs: [test, quality, lint]
    if: always()

    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.test.result }}" != "success" || "${{ needs.quality.result }}" != "success" || "${{ needs.lint.result }}" != "success" ]]; then
          echo "❌ One or more quality checks failed"
          echo "Test: ${{ needs.test.result }}"
          echo "Quality: ${{ needs.quality.result }}"
          echo "Lint: ${{ needs.lint.result }}"
          exit 1
        fi
        echo "✅ All quality checks passed!"
        echo "📊 Coverage: ≥90% (enforced)"
        echo "🧪 Tests: Passed"
        echo "🔍 Lint: Passed"
        echo "📦 Build: Passed"
        echo "Ready for merge! 🚀"