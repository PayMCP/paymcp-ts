name: Security Scanning

on:
  push:
    branches: [ main, master, develop, feat/** ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run weekly on Mondays at 2 AM UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql/codeql-config.yml
        # Enable detailed security and quality queries
        queries: security-and-quality,security-extended

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
        # Upload results to Security tab
        upload: true
        # Wait for processing to complete
        wait-for-processing: true

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Clean up old artifacts
      run: rm -f npm-audit.json dependency-scan-results.json

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate --json > npm-audit.json || true
        cat npm-audit.json

    - name: Install additional security tools
      run: |
        npm install -g audit-ci@6.6.1
        npm install -g better-npm-audit@3.9.0

    - name: Run audit-ci
      run: |
        audit-ci --moderate --report-type json --output-file audit-ci-results.json || true

    - name: Run better-npm-audit
      run: |
        better-npm-audit audit --json > better-audit.json || true

    - name: Upload audit results
      uses: actions/upload-artifact@v4
      with:
        name: dependency-scan-results
        path: |
          npm-audit.json
          audit-ci-results.json
          better-audit.json
        retention-days: 30

  eslint-security:
    name: ESLint Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Clean up old artifacts
      run: rm -f eslint-security.sarif eslint-security-results.json

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install ESLint security plugins
      run: |
        npm install --save-dev eslint@8.57.0
        npm install --save-dev @typescript-eslint/eslint-plugin@6.21.0
        npm install --save-dev @typescript-eslint/parser@6.21.0
        npm install --save-dev eslint-plugin-security@1.7.1
        npm install --save-dev eslint-plugin-no-secrets@0.8.9
        npm install --save-dev @microsoft/eslint-formatter-sarif@3.1.0

    - name: Run ESLint security scan
      run: |
        npx eslint src/ --ext .ts,.js --format json --output-file eslint-security.json || echo '[]' > eslint-security.json
        npx eslint src/ --ext .ts,.js --format @microsoft/eslint-formatter-sarif --output-file eslint-security.sarif || echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"ESLint"}},"results":[]}]}' > eslint-security.sarif

    - name: Upload ESLint SARIF to GitHub
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: eslint-security.sarif
        category: eslint-security
        wait-for-processing: true

    - name: Upload ESLint results
      uses: actions/upload-artifact@v4
      with:
        name: eslint-security-results
        path: |
          eslint-security.json
          eslint-security.sarif
        retention-days: 30

  semgrep:
    name: Semgrep SAST Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Clean up old artifacts
      run: rm -f semgrep.sarif semgrep-results.json

    - name: Run Semgrep
      run: |
        python -m pip install semgrep
        semgrep --config=auto --sarif --output=semgrep.sarif src/ tests/ || true

    - name: Upload SARIF file to GitHub Advanced Security
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('semgrep.sarif') != ''
      with:
        sarif_file: semgrep.sarif
        category: semgrep
        wait-for-processing: true

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        deny-licenses: GPL-2.0, GPL-3.0
        comment-summary-in-pr: always

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, eslint-security, semgrep]
    if: always()
    permissions:
      contents: read
      pull-requests: write
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download scan artifacts
      uses: actions/download-artifact@v4

    - name: Generate native security report
      run: |
        node .github/scripts/security-report.cjs

    - name: Comment PR with security summary
      if: github.event_name == 'pull_request' && hashFiles('security-summary.md') != ''
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          if (fs.existsSync('security-summary.md')) {
            const summary = fs.readFileSync('security-summary.md', 'utf8');

            // Clean up old security comments
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const securityComments = comments.data.filter(
              comment => comment.body.includes('ðŸ”’ Security Scan Results')
            );

            for (const comment of securityComments) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
              });
            }

            // Create new security comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summary
            });
          }

    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: |
          security-summary.md
          security-detailed-report.json
          security-lint-results.sarif
        retention-days: 90